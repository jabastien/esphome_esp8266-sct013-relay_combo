esphomeyaml:
  name: ${device_name}
  platform: ${platform}
  board: ${board}
  includes:
    - sct013.h
  libraries:
    - "EmonLib"


logger:
  # https://esphome.io/components/logger


api:
  # https://esphome.io/components/api
  # password: !secret esphome_api_password


ota:
  # https://esphome.io/components/ota
  password: !secret esphome_ota_password


sensor:
  - platform: custom
    # https://esphome.io/components/sensor/custom
    lambda: |-
      auto my_sensor = new MyCustomSensor();
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      name: ${friendly_name} Sensor Value  # Name is not respected in Home Assistant
      id: sct013
      unit_of_measurement: W


text_sensor:
  - platform: template
    # https://esphome.io/components/text_sensor/template.html
    id: device_state
    lambda: |-
      if (id(sct013).state >= ${trigger_threshold}) {
        return {"Running"};
      } else {
        return {"Standby"};
      }
    update_interval: 5s # give the sensor enough time to stabilize after the relay turns on/off


switch:
  - platform: gpio
    # https://esphome.io/components/switch/gpio
    pin: D1
    id: relay


binary_sensor:
  - platform: template
    # https://esphome.io/components/binary_sensor/template
    name: ${friendly_name} Relay Status
    id: relay_status
    lambda: |-
      if (id(device_state).state == "Running") {
        return true;
      } else {
        return false;
      }
    on_press:
      then:
        - switch.turn_on: relay
    on_release:
      then:
        - switch.turn_off: relay

  - platform: template
    # https://esphome.io/components/binary_sensor/template
    name: ${friendly_name} Sensor Status
    id: sensor_status
    lambda: |-
      if (id(sct013).state >= ${trigger_threshold}) {
        return true;
      } else {
        return false;
      }
