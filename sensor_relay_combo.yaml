##############################
# Requires:
#       sct013.h          -> Place sct013.h in the same directory with this yaml file. "PollingComponent" = sensor polling interval (recommend 500 - 1500 ms) 
##############################


substitutions:
  # https://esphome.io/guides/configuration-types.html#substitutions
  device_name: sensor_relay_combo
  friendly_name: Sensor Relay Combo
  ip_address: !secret sensor_relay_combo_ip
  trigger_threshold: '20.0' # Varies per device. Set this number 10 or 20 above device standby sensor value; see "Analog Input Sensor Value" in the logs
  update_interval: 5s   # interval to test polled values (recommend 5s or greater). Only required if incorporating a relay.


esphomeyaml:
  # https://esphome.io/components/esphomeyaml
  name: ${device_name}
  platform: ESP8266
  board: d1_mini
  includes:
    - sct013.h
  libraries:
    - "EmonLib"


wifi:
  # https://esphome.io/components/wifi
  hostname: ${device_name}
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet
    dns1: !secret wifi_dns1
    dns2: !secret wifi_dns2


# web_server:
#   # https://esphomelib.com/esphomeyaml/components/web_server.html
#   port: 80


logger:
  # https://esphome.io/components/logger


api:
  # https://esphome.io/components/api
  # password: !secret esphome_api_password


ota:
  # https://esphome.io/components/ota
  password: !secret esphome_ota_password


sensor:
  - platform: custom
    # https://esphome.io/components/sensor/custom
    lambda: |-
      auto my_sensor = new MyCustomSensor();
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      name: ${friendly_name} Sensor Value  # Name is not respected in Home Assistant
      id: sensor
      unit_of_measurement: W
      filters:
        - delta: 2


binary_sensor:
  - platform: template
    # https://esphome.io/components/binary_sensor/template
    name: ${friendly_name} Sensor Status
    id: sensor_status
    lambda: |-
      if (id(sensor).state >= ${trigger_threshold}) {
        return true;
      } else {
        return false;
      }

# this section only required if incorporating a relay----------#
  - platform: template
    # https://esphome.io/components/binary_sensor/template
    name: ${friendly_name} Relay Status
    id: relay_status
    lambda: |-
      if (id(device_state).state == "Active") {
        return true;
      } else {
        return false;
      }
    on_press:
      then:
        - switch.turn_on: relay
    on_release:
      then:
        - switch.turn_off: relay


text_sensor:
  - platform: template
    # https://esphome.io/components/text_sensor/template.html
    id: device_state
    lambda: |-
      if (id(sensor).state >= ${trigger_threshold}) {
        return {"Active"};
      } else {
        return {"Standby"};
      }
    update_interval: ${update_interval} # give the sensor enough time to stabilize from spike after the relay turns on/off


switch:
  - platform: gpio
    # https://esphome.io/components/switch/gpio
    pin: D1
    id: relay
#---------- this section only required if incorporating a relay #
